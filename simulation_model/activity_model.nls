__includes ["motives.nls"]

to execute-activity-effect

  if is-currently-allocated-a-bed-in-hospital? and not (current-motivation = treatment-motive) [
    release-bed-in-hospital
  ]
  
  
  if not is-currently-allocated-a-bed-in-hospital? and (current-motivation = treatment-motive) 
  [
    try-acquire-a-bed-in-hospital
  ]
  
  update-resources-based-on-current-activity
  
  
  
  ;might be interesting to hold this variable as an integer, for storing when the next shopping will be needed
  ;additionally, we might want at some point to hold additional variables within homes (i.e. one person getting the food for the whole community)
  
  ;the epistemic infection status depends on whether the person has (had) visible symptoms, not on where it now gathers
  ;though, gathering place might be to be recorded (i.e. a "maybe infected" state if public space has been visited and public space is believed to be contagious)
  ;if [gathering-type] of current-activity = "hospital"
  ;[ set epistemic-infection-status  infection-status ]
  let family-here count ([gatherers] of current-activity) with [member? self [my-relatives] of myself]
  if any? my-relatives and family-here / count my-relatives > 0.5 [ set days-since-seen-relatives 0 ]
  
  if is-worker? 
  [
    let colleagues-here count ([gatherers] of current-activity) with [member? self [my-colleagues] of myself]
    if (colleagues-here / count my-colleagues > 0.5) [ set days-since-seen-colleagues 0 ]]
  let friends-here count ([gatherers] of current-activity) with [member? self [my-friends] of myself]
  if any? my-friends and friends-here / count my-friends > 0.5 [ set days-since-seen-friends 0 ]
  
end

to-report activity-descriptor [gp mo]
  report (list gp mo)
end

to-report is-forced-to-be-here?
  report is-forced-motive? current-motivation
end



to update-resources-based-on-current-activity
  if not is-being-away? current-activity and current-motivation = "travelling" [error "wrong place while travelling"]
  if current-activity = 0 [error "failed to select an activity"]

  if current-motivation = follow-person-in-charge-motive [stop]


  ;if is-at-home? [stop]

  if is-forced-to-be-in-school? or is-learning? or is-getting-tested? or is-resting? or is-relaxing?
  or (is-at-home? and is-forced-to-be-here?) [stop]

  let amount-to-earn 0
  let amount-earned 0
  let contribution-to-stock 0
  if is-working?
  [
    ifelse [gathering-type] of current-activity = "essential-shop"
    [
      set amount-to-earn workers-wages
      let picked-work my-work
      set amount-earned min (list amount-to-earn max (list [amount-of-capital] of picked-work 0))
      ask picked-work [set amount-of-capital amount-of-capital - amount-earned set current-profit current-profit - amount-earned]
    ]
    [
      ifelse [gathering-type] of current-activity = "non-essential-shop"
      [
        set amount-to-earn workers-wages
        let picked-work my-work
        set amount-earned min (list amount-to-earn max (list [amount-of-capital] of picked-work 0))
        ask picked-work [set amount-of-capital amount-of-capital - amount-earned set current-profit current-profit - amount-earned]
      ]
      [
        ifelse [gathering-type] of current-activity = "home"
        [
          set amount-to-earn workers-wages
          let picked-work my-work
          set amount-earned min (list amount-to-earn max (list [amount-of-capital] of picked-work 0))
          set contribution-to-stock amount-earned / amount-to-earn * goods-produced-by-work-performed
          ask picked-work [set amount-of-capital amount-of-capital - amount-earned set current-profit current-profit - amount-earned set stock-of-goods stock-of-goods + contribution-to-stock]
        ]
        [
          ifelse [gathering-type] of current-activity = "university"
          [
            set amount-to-earn workers-wages
            let picked-university my-university;;people relate to only one university
            set amount-earned min (list amount-to-earn max (list [amount-of-capital] of picked-university 0))
            ask picked-university [set amount-of-capital amount-of-capital - amount-earned set current-profit current-profit - amount-earned]
          ]
          [
            ifelse [gathering-type] of current-activity = "hospital"
            [
              set amount-to-earn workers-wages
              let picked-hospital max-one-of all-hospitals [amount-of-capital]
              set amount-earned min (list amount-to-earn max (list [amount-of-capital] of picked-hospital 0))
              ask picked-hospital [set amount-of-capital amount-of-capital - amount-earned set current-profit current-profit - amount-earned]
            ]
            [
              ifelse [gathering-type] of current-activity = "workplace"
              [
                set amount-to-earn workers-wages
                let picked-workplace max-one-of all-workplaces [amount-of-capital]
                set amount-earned min (list amount-to-earn max (list [amount-of-capital] of picked-workplace 0))
                set contribution-to-stock amount-earned / amount-to-earn * goods-produced-by-work-performed
                ask picked-workplace [set amount-of-capital amount-of-capital - amount-earned set current-profit current-profit - amount-earned set stock-of-goods stock-of-goods + contribution-to-stock]
              ]
              [
                ifelse [gathering-type] of current-activity = "school"
                [
                  set amount-to-earn workers-wages
                  let picked-school max-one-of all-schools [amount-of-capital]
                  set amount-earned min (list amount-to-earn max (list [amount-of-capital] of picked-school 0))
                  ask picked-school [set amount-of-capital amount-of-capital - amount-earned set current-profit current-profit - amount-earned]
                ]
                [
                  error (sentence "not implemented" [gathering-type] of current-activity)
                ]
              ]
            ]
          ]
        ]
      ]
    ]

    if government-pays-wages?
    [
      if amount-earned < amount-to-earn
      [
        let worker-subsidy ratio-of-wage-paid-by-the-government * (amount-to-earn - amount-earned)
        set amount-earned amount-earned + worker-subsidy
        set government-reserve-of-capital government-reserve-of-capital - worker-subsidy
      ]
    ]

    set my-amount-of-capital my-amount-of-capital + amount-earned
    set my-current-income my-current-income + amount-earned
    
    set total-amount-of-capital-in-circulation total-amount-of-capital-in-circulation + amount-earned
    set goods-production-of-total-system goods-production-of-total-system + contribution-to-stock

    stop
  ]



  if is-performing-essential-shopping?
  [
    let max-amount-of-rations-I-can-buy (floor my-amount-of-capital / price-of-rations-in-essential-shops)
    let amount-of-rations-to-buy min (list amount-of-rations-I-buy-when-going-to-essential-shops max (list max-amount-of-rations-I-can-buy 0))

    let picked-essential-shop max-one-of all-essential-shops [stock-of-goods]

    let available-goods-in-my-essential-shop max (list [stock-of-goods] of picked-essential-shop 0)

    set amount-of-rations-to-buy min (list amount-of-rations-to-buy available-goods-in-my-essential-shop)

    ask my-home [set available-food-rations available-food-rations + amount-of-rations-to-buy]

    let amount-spent amount-of-rations-to-buy * price-of-rations-in-essential-shops
    let stock-decrease amount-of-rations-to-buy
    set my-amount-of-capital my-amount-of-capital - amount-spent
    set my-current-income my-current-income - amount-spent
    ask picked-essential-shop [set amount-of-capital amount-of-capital + amount-spent set current-profit current-profit + amount-spent set stock-of-goods stock-of-goods - stock-decrease]
    
    set total-amount-of-capital-in-circulation total-amount-of-capital-in-circulation + amount-spent
    stop
  ]

  if is-performing-non-essential-shopping?
  [
    if not closed-non-essential?
    [
      let max-amount-of-rations-I-can-buy my-amount-of-capital / price-of-rations-in-non-essential-shops
      let amount-of-rations-to-buy min (list amount-of-rations-I-buy-when-going-to-shops max (list max-amount-of-rations-I-can-buy 0))

      let available-goods-in-my-non-essential-shop max (list [stock-of-goods] of current-activity 0)

      set amount-of-rations-to-buy min (list amount-of-rations-to-buy available-goods-in-my-non-essential-shop)
      
      set amount-of-last-luxury-items-bought amount-of-rations-to-buy
      let amount-spent amount-of-rations-to-buy * price-of-rations-in-non-essential-shops
      let stock-decrease amount-of-rations-to-buy
      set my-amount-of-capital my-amount-of-capital - amount-spent
      set my-current-income my-current-income - amount-spent
      ask current-activity [set amount-of-capital amount-of-capital + amount-spent set current-profit current-profit + amount-spent set stock-of-goods stock-of-goods - stock-decrease]
      
      set total-amount-of-capital-in-circulation total-amount-of-capital-in-circulation + amount-spent
    ]
    stop
  ]

  if is-being-away? current-activity [stop]
  if current-motivation = treatment-motive [stop];;let's assume being treated is free for now

  error (sentence "not implemented" [gathering-type] of current-activity current-motivation)
end

to-report is-being-away? [a]
  report a = away-gathering-point
end

to-report is-working-at-work?
  report is-working? and is-at-work?
end

to-report is-working?
  report is-working-motive? current-motivation
end

to-report is-working-motive? [m]
  report m = "contractual obligation"
end

to-report #workers-working
  report count workers with [is-working?]
end

to-report #workers-working-at-essential-shop
  report count workers with [is-working? and [gathering-type] of my-work = "essential-shop"]
end

to-report #workers-working-at-non-essential-shop
  report count workers with [is-working? and [gathering-type] of my-work = "non-essential-shop"]
end

to-report #workers-working-at-university
  report count workers with [is-working? and [gathering-type] of my-work = "university"]
end

to-report #workers-working-at-hospital
  report count workers with [is-working? and [gathering-type] of my-work = "hospital"]
end

to-report #workers-working-at-workplace
  report count workers with [is-working? and [gathering-type] of my-work = "workplace"]
end

to-report #workers-working-at-school
  report count workers with [is-working? and [gathering-type] of my-work = "school"]
end

;with the people decision update, this function should now only be about execution, not so much about decision [e.g. implement here the effect of getting tested at the hospital]
to perform-activity
reset-timer
    select-activity
  
    if current-activity = 0 [error "failed to select an activity"]

    ask children with [
      is-currently-in-sitation-of-active-dependence? and
      current-person-I-depend-on != nobody]
    [set current-activity [current-activity] of current-person-I-depend-on
      set current-motivation follow-person-in-charge-motive
    ]

    if not animate? [
      move-to one-of [patches in-radius 3  with [pxcor > [pxcor] of myself]] of current-activity
      set heading towards current-activity
    ]
end

to-report follow-person-in-charge-motive
  report "follow person in charge"
end

to-report is-I-have-contractual-obligations?
  report age = "worker" and (slice-of-the-day = "morning" or slice-of-the-day = "afternoon")
  and not (day-of-the-week = "saturday" or day-of-the-week = "sunday")
end

to-report is-rest-at-home-descriptor? [ad]
  report first ad = my-home and item 1 ad = "rest"
end

to-report is-resting-at-home?
  report is-resting?
  and is-at-home?
end

to-report is-resting?
  report current-motivation = "rest"
end

to-report is-relaxing?
  report current-motivation = "relaxing"
end

to-report is-at-home?
  report  current-activity = my-home
end

to-report is-forced-to-be-in-school?
  report [gathering-type] of current-activity = "school" and current-motivation = "mandatory"
end

to-report is-learning?
  report current-motivation = learning-motive
end

to-report learning-motive
  report "learning"
end

to-report is-getting-tested?
  report current-motivation = "get-tested"
end

to-report is-performing-essential-shopping?
  report is-essential-shop-gathering-point? current-motivation
end

to-report is-essential-shop-gathering-point? [gp]
  report gp = "essential shopping"
end


to-report is-performing-shopping?
  report is-a-shopping-motivation? current-motivation
end


to-report is-performing-non-essential-shopping?
  report is-a-non-essential-shopping-motivation? current-motivation and
  is-a-non-essential-gathering-point? current-activity
end

to-report is-a-non-essential-gathering-point? [gp]
  report [gathering-type] of gp = "non-essential-shop"
end

to-report is-a-non-essential-shopping-motivation? [m]
  report  m = "shopping"
end

to-report is-a-shopping-motivation? [m]
  report is-essential-shop-gathering-point? m or
  is-a-non-essential-shopping-motivation? m
end

to-report amount-of-rations-I-buy-when-going-to-essential-shops
  report days-of-rations-bought * count [gatherers] of my-home
end

to-report amount-of-rations-I-buy-when-going-to-shops
  report 7
end

to-report motive-of [ad]
  report item 1 ad
end

to-report location-of [ad]
  report item 0 ad
end

to-report is-a-leisure-motivation? [motive]
  report motive = "relaxing"
end

to-report is-home-gathering-point? [location]
  report [gathering-type] of location = "home"
end

to-report can-be-done-with-a-dependable-person? [ad]
  if
  is-home-gathering-point? location-of ad
  or ([is-hospital?] of first ad and last ad = "get-tested")
  or (is-a-shopping-motivation? last ad)
  or (is-a-leisure-motivation? motive-of ad)
  [report true]

  if
  ([is-university? or is-hospital? or is-workplace? or is-shop? or is-school?] of location-of ad)
  and (motive-of ad = learning-motive or
    is-contractual-obligation? motive-of ad)
  [report false]

  error (sentence "unimplemented" [gathering-type] of first ad last ad)
end

to-report  is-contractual-obligation? [m]
  report m = "contractual obligation"
end

to perform-people-activities
  reset-timer
  set total-amount-of-capital-in-circulation 0
  set goods-production-of-total-system 0
  
  ask gathering-points [set current-profit 0]
  ask people [
    if working-day? and member? slice-of-the-day ["afternoon" "evening"] [
      set my-expected-income my-current-income
    ]
    set my-current-income 0
    set my-previous-amount-of-capital my-amount-of-capital
  ]
  
  
  
  ask people [
    if not is-being-away? current-activity and current-motivation = "travelling" [error "wrong place while travelling"]
    perform-activity
    
       
    if not is-being-away? current-activity and current-motivation = "travelling" [error (sentence "wrong place while travelling" current-activity current-motivation)]
  ]
  

  ask people [
    if not is-being-away? current-activity and current-motivation = "travelling" [error (sentence "wrong place while travelling" current-activity current-motivation)]
    execute-activity-effect
    update-needs-for-playing (list current-activity current-motivation)
  ]
  animate-walk-to-goal

end

to-report is-get-healed-to-hospital-descriptor? [d]
  report [is-hospital?] of location-of d and motive-of d = treatment-motive
end
